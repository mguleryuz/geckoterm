// This file is auto-generated by @hey-api/openapi-ts

export type ErrorsObject = {
  errors?: Array<{
    status?: string
    title?: string
  }>
}

export type Relationships = {
  [key: string]: unknown
}

export type SimpleTokenPrice = {
  id?: string
  type?: string
  attributes?: {
    token_prices?: {
      [key: string]: unknown
    }
  }
}

export type Token = {
  id?: string
  type?: string
  attributes?: {
    name?: string
    address?: string
    symbol?: string
    decimals?: number
    total_supply?: string | null
    coingecko_coin_id?: string | null
    price_usd?: string | null
    fdv_usd?: string | null
    total_reserve_in_usd?: string | null
    volume_usd?: {
      [key: string]: unknown
    } | null
    market_cap_usd?: string | null
  }
  relationships?: Relationships
}

export type TokenInfo = {
  id?: string
  type?: string
  attributes?: {
    name: string
    address: string
    symbol: string
    decimals?: number
    coingecko_coin_id: string | null
    image_url: string | null
    websites: Array<string>
    description: string | null
    discord_url: string | null
    telegram_handle: string | null
    twitter_handle: string | null
    categories?: Array<string> | null
    gt_category_ids?: Array<string> | null
    gt_score: number | null
    metadata_updated_at?: string | null
  }
  relationships?: Relationships
}

export type Pool = {
  id?: string
  type?: string
  attributes?: {
    name?: string
    address?: string
    base_token_price_usd?: string | null
    quote_token_price_usd?: string | null
    base_token_price_native_currency?: string | null
    quote_token_price_native_currency?: string | null
    base_token_price_quote_token?: string | null
    quote_token_price_base_token?: string | null
    pool_created_at?: string | null
    reserve_in_usd?: string | null
    fdv_usd?: string | null
    market_cap_usd?: string | null
    price_change_percentage?: {
      [key: string]: unknown
    }
    transactions?: {
      [key: string]: unknown
    }
    volume_usd?: {
      [key: string]: unknown
    }
  }
  relationships?: Relationships
}

export type PoolDetails = {
  id?: string
  type?: string
  attributes?: {
    name?: string
    pool_name?: string
    pool_fee_percentage?: string | null
    address?: string
    base_token_price_usd?: string | null
    quote_token_price_usd?: string | null
    base_token_price_native_currency?: string | null
    quote_token_price_native_currency?: string | null
    base_token_price_quote_token?: string | null
    quote_token_price_base_token?: string | null
    pool_created_at?: string | null
    reserve_in_usd?: string | null
    fdv_usd?: string | null
    market_cap_usd?: string | null
    price_change_percentage?: {
      [key: string]: unknown
    }
    transactions?: {
      [key: string]: unknown
    }
    volume_usd?: {
      [key: string]: unknown
    }
    locked_liquidity_percentage?: string | null
  }
  relationships?: Relationships
}

export type Ohlcv = {
  data?: {
    id?: string
    type?: string
    attributes?: {
      ohlcv_list?: Array<Array<number>>
    }
  }
  meta?: {
    base?: OhlcvToken
    quote?: OhlcvToken
  }
}

export type OhlcvToken = {
  name?: string
  symbol?: string
  address?: string
  coingecko_coin_id?: string | null
}

export type Trade = {
  id?: string
  type?: string
  attributes?: {
    block_number?: number
    block_timestamp?: string
    tx_hash?: string
    tx_from_address?: string
    from_token_amount?: string
    to_token_amount?: string
    price_from_in_currency_token?: string
    price_to_in_currency_token?: string
    price_from_in_usd?: string
    price_to_in_usd?: string
    kind?: string
    volume_in_usd?: string
    from_token_address?: string
    to_token_address?: string
  }
}

export type GetNetworksByNetworkPoolsByPoolAddressOhlcvByTimeframeData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
    /**
     * timeframe<br><br><b>Available values:</b> day, hour, minute<br><b>Example:</b> day
     */
    timeframe: string
    /**
     * pool address<br><br><b>Example:</b> 0x60594a405d53811d3bc4766596efd80fd545a270<br>**Note: Pools with more than 2 tokens are not yet supported for this endpoint.**
     */
    pool_address: string
  }
  query?: {
    /**
     * time period to aggregate for each ohlcv (eg. `/minute?aggregate=15` for 15m ohlcv)<br><br><b>Available values (day):</b> 1<br><br><b>Available values (hour):</b> 1, 4, 12<br><br><b>Available values (minute):</b> 1, 5, 15<br><b>Default:</b> 1
     */
    aggregate?: string
    /**
     * return ohlcv data before this timestamp (integer seconds since epoch)<br><b>Example:</b> 1679414400
     */
    before_timestamp?: string
    /**
     * limit number of ohlcv results to return (default: 100, max: 1000)<br><b>Example:</b> 100
     */
    limit?: string
    /**
     * return ohlcv in USD or quote token (default: usd)<br><br><b>Available values:</b> usd, token
     */
    currency?: string
    /**
     * populate the OHLCV values for empty intervals (default: false)<br><br><b>Example:</b> true
     */
    include_empty_intervals?: boolean
    /**
     * return ohlcv for base or quote token; use this to invert the chart. (default: base)<br><br><b>Available values:</b> base, quote, or a token address
     */
    token?: string
  }
  url: '/networks/{network}/pools/{pool_address}/ohlcv/{timeframe}'
}

export type GetNetworksByNetworkPoolsByPoolAddressOhlcvByTimeframeErrors = {
  /**
   * Pools with >2 tokens are not yet supported for this endpoint
   */
  422: ErrorsObject
}

export type GetNetworksByNetworkPoolsByPoolAddressOhlcvByTimeframeError =
  GetNetworksByNetworkPoolsByPoolAddressOhlcvByTimeframeErrors[keyof GetNetworksByNetworkPoolsByPoolAddressOhlcvByTimeframeErrors]

export type GetNetworksByNetworkPoolsByPoolAddressOhlcvByTimeframeResponses = {
  /**
   * Get OHLCV data of a pool
   */
  200: Ohlcv
}

export type GetNetworksByNetworkPoolsByPoolAddressOhlcvByTimeframeResponse =
  GetNetworksByNetworkPoolsByPoolAddressOhlcvByTimeframeResponses[keyof GetNetworksByNetworkPoolsByPoolAddressOhlcvByTimeframeResponses]

export type GetNetworksByNetworkDexesData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
  }
  query?: {
    /**
     * Page through results
     */
    page?: number
  }
  url: '/networks/{network}/dexes'
}

export type GetNetworksByNetworkDexesResponses = {
  /**
   * Get list of supported dexes on a network
   */
  200: {
    data?: Array<{
      id?: string
      type?: string
      attributes?: {
        name?: string
      }
    }>
  }
}

export type GetNetworksByNetworkDexesResponse =
  GetNetworksByNetworkDexesResponses[keyof GetNetworksByNetworkDexesResponses]

export type GetNetworksData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page through results
     */
    page?: number
  }
  url: '/networks'
}

export type GetNetworksResponses = {
  /**
   * Get list of supported networks
   */
  200: {
    data?: Array<{
      id?: string
      type?: string
      attributes?: {
        name?: string
      }
    }>
  }
}

export type GetNetworksResponse =
  GetNetworksResponses[keyof GetNetworksResponses]

export type GetNetworksTrendingPoolsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> base_token, quote_token, dex, network<br><b>Example:</b> base_token,quote_token
     */
    include?: string
    /**
     * Page through results (maximum: 10)
     */
    page?: number
    /**
     * Duration to sort trending list by<br><br><b>Available resources:</b> 5m, 1h, 6h, 24h<br><b>Example:</b> 5m
     */
    duration?: string
  }
  url: '/networks/trending_pools'
}

export type GetNetworksTrendingPoolsErrors = {
  /**
   * Invalid duration. Allowed values: 5m, 1h, 6h, 24h
   */
  400: ErrorsObject
}

export type GetNetworksTrendingPoolsError =
  GetNetworksTrendingPoolsErrors[keyof GetNetworksTrendingPoolsErrors]

export type GetNetworksTrendingPoolsResponses = {
  /**
   * Get trending pools across all networks
   */
  200: {
    data?: Array<Pool>
  }
}

export type GetNetworksTrendingPoolsResponse =
  GetNetworksTrendingPoolsResponses[keyof GetNetworksTrendingPoolsResponses]

export type GetNetworksByNetworkTrendingPoolsData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
  }
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> base_token, quote_token, dex<br><b>Example:</b> base_token,quote_token
     */
    include?: string
    /**
     * Page through results (maximum: 10)
     */
    page?: number
    /**
     * Duration to sort trending list by<br><br><b>Available resources:</b> 5m, 1h, 6h, 24h<br><b>Example:</b> 5m
     */
    duration?: string
  }
  url: '/networks/{network}/trending_pools'
}

export type GetNetworksByNetworkTrendingPoolsErrors = {
  /**
   * Specified network not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkTrendingPoolsError =
  GetNetworksByNetworkTrendingPoolsErrors[keyof GetNetworksByNetworkTrendingPoolsErrors]

export type GetNetworksByNetworkTrendingPoolsResponses = {
  /**
   * Get trending pools on a network
   */
  200: {
    data?: Array<Pool>
  }
}

export type GetNetworksByNetworkTrendingPoolsResponse =
  GetNetworksByNetworkTrendingPoolsResponses[keyof GetNetworksByNetworkTrendingPoolsResponses]

export type GetNetworksByNetworkPoolsByAddressData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
    /**
     * pool address<br><br><b>Example:</b> 0x60594a405d53811d3bc4766596efd80fd545a270
     */
    address: string
  }
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> base_token, quote_token, dex<br><b>Example:</b> base_token,quote_token
     */
    include?: string
    /**
     * include volume breakdown in response (default: false)<br><br><b>Example:</b> true
     */
    include_volume_breakdown?: boolean
  }
  url: '/networks/{network}/pools/{address}'
}

export type GetNetworksByNetworkPoolsByAddressErrors = {
  /**
   * Invalid include_volume_breakdown parameter
   */
  400: ErrorsObject
  /**
   * Specified network not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkPoolsByAddressError =
  GetNetworksByNetworkPoolsByAddressErrors[keyof GetNetworksByNetworkPoolsByAddressErrors]

export type GetNetworksByNetworkPoolsByAddressResponses = {
  /**
   * Get specific pool on a network
   */
  200: PoolDetails
}

export type GetNetworksByNetworkPoolsByAddressResponse =
  GetNetworksByNetworkPoolsByAddressResponses[keyof GetNetworksByNetworkPoolsByAddressResponses]

export type GetNetworksByNetworkPoolsMultiByAddressesData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
    /**
     * comma-separated list of pool addresses (up to 30 addresses)<br>addresses not found in the GeckoTerminal database will be ignored<br><br><b>Example:</b> 0x60594a405d53811d3bc4766596efd80fd545a270,0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640
     */
    addresses: string
  }
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> base_token, quote_token, dex<br><b>Example:</b> base_token,quote_token
     */
    include?: string
    /**
     * include volume breakdown in response (default: false)<br><br><b>Example:</b> true
     */
    include_volume_breakdown?: boolean
  }
  url: '/networks/{network}/pools/multi/{addresses}'
}

export type GetNetworksByNetworkPoolsMultiByAddressesErrors = {
  /**
   * Exceeded maximum number of addresses
   */
  400: ErrorsObject
  /**
   * Specified network not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkPoolsMultiByAddressesError =
  GetNetworksByNetworkPoolsMultiByAddressesErrors[keyof GetNetworksByNetworkPoolsMultiByAddressesErrors]

export type GetNetworksByNetworkPoolsMultiByAddressesResponses = {
  /**
   * Get multiple pools on a network
   */
  200: {
    data?: Array<PoolDetails>
    included?: Array<unknown>
  }
}

export type GetNetworksByNetworkPoolsMultiByAddressesResponse =
  GetNetworksByNetworkPoolsMultiByAddressesResponses[keyof GetNetworksByNetworkPoolsMultiByAddressesResponses]

export type GetNetworksByNetworkPoolsData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
  }
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> base_token, quote_token, dex<br><b>Example:</b> base_token,quote_token
     */
    include?: string
    /**
     * Page through results (maximum: 10)
     */
    page?: number
    /**
     * Sort pools by one of the following options<br><br><b>Available sort options:</b> h24_tx_count_desc, h24_volume_usd_desc<br><br><b>Default:</b> h24_tx_count_desc
     */
    sort?: string
  }
  url: '/networks/{network}/pools'
}

export type GetNetworksByNetworkPoolsErrors = {
  /**
   * Specified network not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkPoolsError =
  GetNetworksByNetworkPoolsErrors[keyof GetNetworksByNetworkPoolsErrors]

export type GetNetworksByNetworkPoolsResponses = {
  /**
   * Get top pools on a network
   */
  200: {
    data?: Array<Pool>
  }
}

export type GetNetworksByNetworkPoolsResponse =
  GetNetworksByNetworkPoolsResponses[keyof GetNetworksByNetworkPoolsResponses]

export type GetNetworksByNetworkDexesByDexPoolsData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
    /**
     * dex id from /networks/{network}/dexes list<br><br><b>Example:</b> sushiswap
     */
    dex: string
  }
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> base_token, quote_token, dex<br><b>Example:</b> base_token,quote_token
     */
    include?: string
    /**
     * Page through results (maximum: 10)
     */
    page?: number
    /**
     * Sort pools by one of the following options<br><br><b>Available sort options:</b> h24_tx_count_desc, h24_volume_usd_desc<br><br><b>Default:</b> h24_tx_count_desc
     */
    sort?: string
  }
  url: '/networks/{network}/dexes/{dex}/pools'
}

export type GetNetworksByNetworkDexesByDexPoolsErrors = {
  /**
   * Specified dex not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkDexesByDexPoolsError =
  GetNetworksByNetworkDexesByDexPoolsErrors[keyof GetNetworksByNetworkDexesByDexPoolsErrors]

export type GetNetworksByNetworkDexesByDexPoolsResponses = {
  /**
   * Get top pools on a network's dex
   */
  200: {
    data?: Array<Pool>
  }
}

export type GetNetworksByNetworkDexesByDexPoolsResponse =
  GetNetworksByNetworkDexesByDexPoolsResponses[keyof GetNetworksByNetworkDexesByDexPoolsResponses]

export type GetNetworksByNetworkTokensByTokenAddressPoolsData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
    /**
     * address of token<br><br><b>Example:</b> 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
     */
    token_address: string
  }
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> base_token, quote_token, dex<br><b>Example:</b> base_token,quote_token
     */
    include?: string
    /**
     * Page through results (maximum: 10)
     */
    page?: number
    /**
     * Sort pools by one of the following options<br><br><b>Available sort options:</b> h24_volume_usd_liquidity_desc, h24_tx_count_desc, h24_volume_usd_desc<br><br><b>Default:</b> h24_volume_usd_liquidity_desc
     */
    sort?: string
  }
  url: '/networks/{network}/tokens/{token_address}/pools'
}

export type GetNetworksByNetworkTokensByTokenAddressPoolsErrors = {
  /**
   * Token for specified address not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkTokensByTokenAddressPoolsError =
  GetNetworksByNetworkTokensByTokenAddressPoolsErrors[keyof GetNetworksByNetworkTokensByTokenAddressPoolsErrors]

export type GetNetworksByNetworkTokensByTokenAddressPoolsResponses = {
  /**
   * Get top pools for a token
   */
  200: {
    data?: Array<Pool>
  }
}

export type GetNetworksByNetworkTokensByTokenAddressPoolsResponse =
  GetNetworksByNetworkTokensByTokenAddressPoolsResponses[keyof GetNetworksByNetworkTokensByTokenAddressPoolsResponses]

export type GetNetworksByNetworkNewPoolsData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
  }
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> base_token, quote_token, dex<br><b>Example:</b> base_token,quote_token
     */
    include?: string
    /**
     * Page through results (maximum: 10)
     */
    page?: number
  }
  url: '/networks/{network}/new_pools'
}

export type GetNetworksByNetworkNewPoolsErrors = {
  /**
   * Specified network not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkNewPoolsError =
  GetNetworksByNetworkNewPoolsErrors[keyof GetNetworksByNetworkNewPoolsErrors]

export type GetNetworksByNetworkNewPoolsResponses = {
  /**
   * Get latest pools on a network
   */
  200: {
    data?: Array<Pool>
  }
}

export type GetNetworksByNetworkNewPoolsResponse =
  GetNetworksByNetworkNewPoolsResponses[keyof GetNetworksByNetworkNewPoolsResponses]

export type GetNetworksNewPoolsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> base_token, quote_token, dex, network<br><b>Example:</b> base_token,quote_token
     */
    include?: string
    /**
     * Page through results (maximum: 10)
     */
    page?: number
  }
  url: '/networks/new_pools'
}

export type GetNetworksNewPoolsResponses = {
  /**
   * Get latest pools across all networks
   */
  200: {
    data?: Array<Pool>
  }
}

export type GetNetworksNewPoolsResponse =
  GetNetworksNewPoolsResponses[keyof GetNetworksNewPoolsResponses]

export type GetSearchPoolsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query: can be pool address, token address, or token symbol.<br>Returns matching pools.<br><br><b>Example:</b> ETH
     */
    query?: string
    /**
     * _(optional)_ network id from /networks list<br><br><b>Example:</b> eth
     */
    network?: string
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> base_token, quote_token, dex<br><b>Example:</b> base_token,quote_token
     */
    include?: string
    /**
     * Page through results (maximum: 10)
     */
    page?: number
  }
  url: '/search/pools'
}

export type GetSearchPoolsResponses = {
  /**
   * Search for pools on a network
   */
  200: {
    data?: Array<Pool>
    included?: Array<unknown>
  }
}

export type GetSearchPoolsResponse =
  GetSearchPoolsResponses[keyof GetSearchPoolsResponses]

export type GetNetworksByNetworkPoolsByPoolAddressTradesData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
    /**
     * pool address<br><br><b>Example:</b> 0x60594a405d53811d3bc4766596efd80fd545a270
     */
    pool_address: string
  }
  query?: {
    /**
     * return trades with volume greater than this value in USD (default: 0)<br><b>Example:</b> 100000
     */
    trade_volume_in_usd_greater_than?: number
    /**
     * return trades for base or quote token; use this to invert the data. (default: base)<br><br><b>Available values:</b> base, quote, or a token address
     */
    token?: string
  }
  url: '/networks/{network}/pools/{pool_address}/trades'
}

export type GetNetworksByNetworkPoolsByPoolAddressTradesErrors = {
  /**
   * Provided token is invalid
   */
  400: ErrorsObject
  /**
   * Specified pool not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkPoolsByPoolAddressTradesError =
  GetNetworksByNetworkPoolsByPoolAddressTradesErrors[keyof GetNetworksByNetworkPoolsByPoolAddressTradesErrors]

export type GetNetworksByNetworkPoolsByPoolAddressTradesResponses = {
  /**
   * Get last 300 trades in past 24 hours from a pool
   */
  200: {
    data?: Array<Trade>
  }
}

export type GetNetworksByNetworkPoolsByPoolAddressTradesResponse =
  GetNetworksByNetworkPoolsByPoolAddressTradesResponses[keyof GetNetworksByNetworkPoolsByPoolAddressTradesResponses]

export type GetNetworksByNetworkTokensByAddressData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
    /**
     * token address<br><br><b>Example:</b> 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
     */
    address: string
  }
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> top_pools<br><b>Example:</b> top_pools
     */
    include?: string
  }
  url: '/networks/{network}/tokens/{address}'
}

export type GetNetworksByNetworkTokensByAddressErrors = {
  /**
   * Specified network not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkTokensByAddressError =
  GetNetworksByNetworkTokensByAddressErrors[keyof GetNetworksByNetworkTokensByAddressErrors]

export type GetNetworksByNetworkTokensByAddressResponses = {
  /**
   * Get specific token on a network
   */
  200: {
    data?: Token
  }
}

export type GetNetworksByNetworkTokensByAddressResponse =
  GetNetworksByNetworkTokensByAddressResponses[keyof GetNetworksByNetworkTokensByAddressResponses]

export type GetNetworksByNetworkTokensMultiByAddressesData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
    /**
     * comma-separated list of token addresses (up to 30 addresses)<br>addresses not found in the GeckoTerminal database will be ignored<br><br> **Note:** top_pools for this endpoint returns only the first top pool for each token<br><br><b>Example:</b> 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2,0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
     */
    addresses: string
  }
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> top_pools<br><b>Example:</b> top_pools
     */
    include?: string
  }
  url: '/networks/{network}/tokens/multi/{addresses}'
}

export type GetNetworksByNetworkTokensMultiByAddressesErrors = {
  /**
   * Exceeded maximum number of addresses
   */
  400: ErrorsObject
  /**
   * Specified network not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkTokensMultiByAddressesError =
  GetNetworksByNetworkTokensMultiByAddressesErrors[keyof GetNetworksByNetworkTokensMultiByAddressesErrors]

export type GetNetworksByNetworkTokensMultiByAddressesResponses = {
  /**
   * Get multiple tokens on a network
   */
  200: {
    data?: Array<Token>
    included?: Array<unknown>
  }
}

export type GetNetworksByNetworkTokensMultiByAddressesResponse =
  GetNetworksByNetworkTokensMultiByAddressesResponses[keyof GetNetworksByNetworkTokensMultiByAddressesResponses]

export type GetNetworksByNetworkTokensByAddressInfoData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
    /**
     * token address<br><br><b>Example:</b> 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
     */
    address: string
  }
  query?: never
  url: '/networks/{network}/tokens/{address}/info'
}

export type GetNetworksByNetworkTokensByAddressInfoErrors = {
  /**
   * Specified network not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkTokensByAddressInfoError =
  GetNetworksByNetworkTokensByAddressInfoErrors[keyof GetNetworksByNetworkTokensByAddressInfoErrors]

export type GetNetworksByNetworkTokensByAddressInfoResponses = {
  /**
   * Get specific token info on a network. Data may be sourced on-chain and is not vetted by the CoinGecko team.
   */
  200: {
    data?: TokenInfo
  }
}

export type GetNetworksByNetworkTokensByAddressInfoResponse =
  GetNetworksByNetworkTokensByAddressInfoResponses[keyof GetNetworksByNetworkTokensByAddressInfoResponses]

export type GetNetworksByNetworkPoolsByPoolAddressInfoData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
    /**
     * pool address<br><br><b>Example:</b> 0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852
     */
    pool_address: string
  }
  query?: never
  url: '/networks/{network}/pools/{pool_address}/info'
}

export type GetNetworksByNetworkPoolsByPoolAddressInfoErrors = {
  /**
   * Specified network not found
   */
  404: ErrorsObject
}

export type GetNetworksByNetworkPoolsByPoolAddressInfoError =
  GetNetworksByNetworkPoolsByPoolAddressInfoErrors[keyof GetNetworksByNetworkPoolsByPoolAddressInfoErrors]

export type GetNetworksByNetworkPoolsByPoolAddressInfoResponses = {
  /**
   * Get pool tokens info on a network. Data may be sourced on-chain and is not vetted by the CoinGecko team.
   */
  200: {
    data?: Array<TokenInfo>
  }
}

export type GetNetworksByNetworkPoolsByPoolAddressInfoResponse =
  GetNetworksByNetworkPoolsByPoolAddressInfoResponses[keyof GetNetworksByNetworkPoolsByPoolAddressInfoResponses]

export type GetTokensInfoRecentlyUpdatedData = {
  body?: never
  path?: never
  query?: {
    /**
     * Attributes for related resources to include, which will be returned under the top-level `"included"` key<br><br><b>Available resources:</b> network<br><b>Example:</b> network
     */
    include?: string
    /**
     * filter tokens by provided network<br><br><b>Example:</b> eth
     */
    network?: string
  }
  url: '/tokens/info_recently_updated'
}

export type GetTokensInfoRecentlyUpdatedResponses = {
  /**
   * Get 100 tokens info across all networks ordered by most recently updated
   */
  200: {
    data?: Array<TokenInfo>
  }
}

export type GetTokensInfoRecentlyUpdatedResponse =
  GetTokensInfoRecentlyUpdatedResponses[keyof GetTokensInfoRecentlyUpdatedResponses]

export type GetSimpleNetworksByNetworkTokenPriceByAddressesData = {
  body?: never
  path: {
    /**
     * network id from /networks list<br><br><b>Example:</b> eth
     */
    network: string
    /**
     * comma-separated list of token addresses (up to 30 addresses)<br>addresses not found in the GeckoTerminal database will be ignored<br><br> **Note:** By using this endpoint, you are leaving to GeckoTerminal's routing to determine the best pool for the price of the token. As liquidity and pool activity changes, you may find that the source for token price can change. If you would like full control over where the price is obtained, pass in the specific pool address using /pool API endpoints instead.<br><br><b>Example:</b> 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2,0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
     */
    addresses: string
  }
  query?: {
    /**
     * include market cap in response (default: false)<br><br><b>Example:</b> true
     */
    include_market_cap?: boolean
    /**
     * if include_market_cap=true, setting mcap_fdv_fallback=true will use the token's FDV as a fallback when the market cap is null or 0 (default: false).<br><br><b>Example:</b> true
     */
    mcap_fdv_fallback?: boolean
    /**
     * include 24h volume in response (default: false)<br><br><b>Example:</b> true
     */
    include_24hr_vol?: boolean
    /**
     * include 24h price change percentage in response (default: false)<br><br><b>Example:</b> true
     */
    include_24hr_price_change?: boolean
    /**
     * include 24h price change percentage in response (default: false)<br><br><b>Example:</b> true
     */
    include_total_reserve_in_usd?: boolean
  }
  url: '/simple/networks/{network}/token_price/{addresses}'
}

export type GetSimpleNetworksByNetworkTokenPriceByAddressesErrors = {
  /**
   * Exceeded maximum number of addresses
   */
  400: ErrorsObject
  /**
   * Specified network not found
   */
  404: ErrorsObject
}

export type GetSimpleNetworksByNetworkTokenPriceByAddressesError =
  GetSimpleNetworksByNetworkTokenPriceByAddressesErrors[keyof GetSimpleNetworksByNetworkTokenPriceByAddressesErrors]

export type GetSimpleNetworksByNetworkTokenPriceByAddressesResponses = {
  /**
   * Get current USD prices of multiple tokens on a network
   */
  200: {
    data?: Array<SimpleTokenPrice>
  }
}

export type GetSimpleNetworksByNetworkTokenPriceByAddressesResponse =
  GetSimpleNetworksByNetworkTokenPriceByAddressesResponses[keyof GetSimpleNetworksByNetworkTokenPriceByAddressesResponses]

export type ClientOptions = {
  baseUrl: `${string}://${string}/api/v2` | (string & {})
}
