/* tslint:disable */
/* eslint-disable */
/**
 * GeckoTerminal API V2
 * GeckoTerminal Public API endpoints.  ## Beta Release The API is in its Beta release, and is subject to frequent changes. However, we aim to provide minimal disruption, and setting the request Version would help avoid unexpected issues.  **Please subscribe via [this form](https://forms.gle/jSMu4jLQBXeiVD1U9) to be notified of important API updates.**  ## Base URL All endpoints below use the base URL: `https://api.geckoterminal.com/api/v2`  ## Versioning It is recommended to set the API version via the `Accept` header. The current version is **20230302**.  For example, to specify the current version, set header `Accept: application/json;version=20230302`.  _If no version is specified, the latest version will be used._  ## Data Freshness All endpoint tags are cached for **1 minute**  All data is updated **roughly 10 to 20 seconds** after a transaction is finalized on the blockchain, subject to the network\'s availability.  ## Rate Limit Our free API is limited to **30 calls/minute**. Should you require a higher rate limit, you may subscribe to any CoinGecko API paid plan to access higher rate limit for GeckoTerminal endpoints (known as /onchain endpoints) or learn more at [CoinGecko](https://www.coingecko.com/en/api/pricing).   To share with us your feedback about the public API, let us know [here](https://forms.gle/jSMu4jLQBXeiVD1U9)!
 *
 * The version of the OpenAPI document: v2-beta
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  ErrorsObject,
  NetworksNetworkPoolsMultiAddressesGet200Response,
  NetworksTrendingPoolsGet200Response,
  Pool,
} from '../models/index'
import {
  ErrorsObjectFromJSON,
  ErrorsObjectToJSON,
  NetworksNetworkPoolsMultiAddressesGet200ResponseFromJSON,
  NetworksNetworkPoolsMultiAddressesGet200ResponseToJSON,
  NetworksTrendingPoolsGet200ResponseFromJSON,
  NetworksTrendingPoolsGet200ResponseToJSON,
  PoolFromJSON,
  PoolToJSON,
} from '../models/index'

export interface NetworksNetworkDexesDexPoolsGetRequest {
  network: string
  dex: string
  include?: string
  page?: number
  sort?: string
}

export interface NetworksNetworkNewPoolsGetRequest {
  network: string
  include?: string
  page?: number
}

export interface NetworksNetworkPoolsAddressGetRequest {
  network: string
  address: string
  include?: string
}

export interface NetworksNetworkPoolsGetRequest {
  network: string
  include?: string
  page?: number
  sort?: string
}

export interface NetworksNetworkPoolsMultiAddressesGetRequest {
  network: string
  addresses: string
  include?: string
}

export interface NetworksNetworkTrendingPoolsGetRequest {
  network: string
  include?: string
  page?: number
}

export interface NetworksNewPoolsGetRequest {
  include?: string
  page?: number
}

export interface NetworksTrendingPoolsGetRequest {
  include?: string
  page?: number
}

export interface SearchPoolsGetRequest {
  query?: string
  network?: string
  include?: string
  page?: number
}

/**
 *
 */
export class PoolsApi extends runtime.BaseAPI {
  /**
   * Get top pools on a network\'s dex
   */
  async networksNetworkDexesDexPoolsGetRaw(
    requestParameters: NetworksNetworkDexesDexPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<NetworksTrendingPoolsGet200Response>> {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling networksNetworkDexesDexPoolsGet().'
      )
    }

    if (requestParameters['dex'] == null) {
      throw new runtime.RequiredError(
        'dex',
        'Required parameter "dex" was null or undefined when calling networksNetworkDexesDexPoolsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    if (requestParameters['sort'] != null) {
      queryParameters['sort'] = requestParameters['sort']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/{network}/dexes/{dex}/pools`
          .replace(
            `{${'network'}}`,
            encodeURIComponent(String(requestParameters['network']))
          )
          .replace(
            `{${'dex'}}`,
            encodeURIComponent(String(requestParameters['dex']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksTrendingPoolsGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get top pools on a network\'s dex
   */
  async networksNetworkDexesDexPoolsGet(
    requestParameters: NetworksNetworkDexesDexPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksTrendingPoolsGet200Response> {
    const response = await this.networksNetworkDexesDexPoolsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get latest pools on a network
   */
  async networksNetworkNewPoolsGetRaw(
    requestParameters: NetworksNetworkNewPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<NetworksTrendingPoolsGet200Response>> {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling networksNetworkNewPoolsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/{network}/new_pools`.replace(
          `{${'network'}}`,
          encodeURIComponent(String(requestParameters['network']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksTrendingPoolsGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get latest pools on a network
   */
  async networksNetworkNewPoolsGet(
    requestParameters: NetworksNetworkNewPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksTrendingPoolsGet200Response> {
    const response = await this.networksNetworkNewPoolsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get specific pool on a network
   */
  async networksNetworkPoolsAddressGetRaw(
    requestParameters: NetworksNetworkPoolsAddressGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Pool>> {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling networksNetworkPoolsAddressGet().'
      )
    }

    if (requestParameters['address'] == null) {
      throw new runtime.RequiredError(
        'address',
        'Required parameter "address" was null or undefined when calling networksNetworkPoolsAddressGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/{network}/pools/{address}`
          .replace(
            `{${'network'}}`,
            encodeURIComponent(String(requestParameters['network']))
          )
          .replace(
            `{${'address'}}`,
            encodeURIComponent(String(requestParameters['address']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PoolFromJSON(jsonValue)
    )
  }

  /**
   * Get specific pool on a network
   */
  async networksNetworkPoolsAddressGet(
    requestParameters: NetworksNetworkPoolsAddressGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Pool> {
    const response = await this.networksNetworkPoolsAddressGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get top pools on a network
   */
  async networksNetworkPoolsGetRaw(
    requestParameters: NetworksNetworkPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<NetworksTrendingPoolsGet200Response>> {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling networksNetworkPoolsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    if (requestParameters['sort'] != null) {
      queryParameters['sort'] = requestParameters['sort']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/{network}/pools`.replace(
          `{${'network'}}`,
          encodeURIComponent(String(requestParameters['network']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksTrendingPoolsGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get top pools on a network
   */
  async networksNetworkPoolsGet(
    requestParameters: NetworksNetworkPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksTrendingPoolsGet200Response> {
    const response = await this.networksNetworkPoolsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get multiple pools on a network
   */
  async networksNetworkPoolsMultiAddressesGetRaw(
    requestParameters: NetworksNetworkPoolsMultiAddressesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<NetworksNetworkPoolsMultiAddressesGet200Response>
  > {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling networksNetworkPoolsMultiAddressesGet().'
      )
    }

    if (requestParameters['addresses'] == null) {
      throw new runtime.RequiredError(
        'addresses',
        'Required parameter "addresses" was null or undefined when calling networksNetworkPoolsMultiAddressesGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/{network}/pools/multi/{addresses}`
          .replace(
            `{${'network'}}`,
            encodeURIComponent(String(requestParameters['network']))
          )
          .replace(
            `{${'addresses'}}`,
            encodeURIComponent(String(requestParameters['addresses']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksNetworkPoolsMultiAddressesGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get multiple pools on a network
   */
  async networksNetworkPoolsMultiAddressesGet(
    requestParameters: NetworksNetworkPoolsMultiAddressesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksNetworkPoolsMultiAddressesGet200Response> {
    const response = await this.networksNetworkPoolsMultiAddressesGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get trending pools on a network
   */
  async networksNetworkTrendingPoolsGetRaw(
    requestParameters: NetworksNetworkTrendingPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<NetworksTrendingPoolsGet200Response>> {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling networksNetworkTrendingPoolsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/{network}/trending_pools`.replace(
          `{${'network'}}`,
          encodeURIComponent(String(requestParameters['network']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksTrendingPoolsGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get trending pools on a network
   */
  async networksNetworkTrendingPoolsGet(
    requestParameters: NetworksNetworkTrendingPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksTrendingPoolsGet200Response> {
    const response = await this.networksNetworkTrendingPoolsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get latest pools across all networks
   */
  async networksNewPoolsGetRaw(
    requestParameters: NetworksNewPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<NetworksTrendingPoolsGet200Response>> {
    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/new_pools`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksTrendingPoolsGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get latest pools across all networks
   */
  async networksNewPoolsGet(
    requestParameters: NetworksNewPoolsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksTrendingPoolsGet200Response> {
    const response = await this.networksNewPoolsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get trending pools across all networks
   */
  async networksTrendingPoolsGetRaw(
    requestParameters: NetworksTrendingPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<NetworksTrendingPoolsGet200Response>> {
    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/trending_pools`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksTrendingPoolsGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get trending pools across all networks
   */
  async networksTrendingPoolsGet(
    requestParameters: NetworksTrendingPoolsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksTrendingPoolsGet200Response> {
    const response = await this.networksTrendingPoolsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Search for pools on a network
   */
  async searchPoolsGetRaw(
    requestParameters: SearchPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<NetworksNetworkPoolsMultiAddressesGet200Response>
  > {
    const queryParameters: any = {}

    if (requestParameters['query'] != null) {
      queryParameters['query'] = requestParameters['query']
    }

    if (requestParameters['network'] != null) {
      queryParameters['network'] = requestParameters['network']
    }

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/search/pools`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksNetworkPoolsMultiAddressesGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Search for pools on a network
   */
  async searchPoolsGet(
    requestParameters: SearchPoolsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksNetworkPoolsMultiAddressesGet200Response> {
    const response = await this.searchPoolsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
