/* tslint:disable */
/* eslint-disable */
/**
 * GeckoTerminal API V2
 * GeckoTerminal Public API endpoints.  ## Beta Release The API is in its Beta release, and is subject to frequent changes. However, we aim to provide minimal disruption, and setting the request Version would help avoid unexpected issues.  **Please subscribe via [this form](https://forms.gle/jSMu4jLQBXeiVD1U9) to be notified of important API updates.**  ## Base URL All endpoints below use the base URL: `https://api.geckoterminal.com/api/v2`  ## Versioning It is recommended to set the API version via the `Accept` header. The current version is **20230302**.  For example, to specify the current version, set header `Accept: application/json;version=20230302`.  _If no version is specified, the latest version will be used._  ## Data Freshness All endpoint tags are cached for **1 minute**  All data is updated **roughly 10 to 20 seconds** after a transaction is finalized on the blockchain, subject to the network\'s availability.  ## Rate Limit Our free API is limited to **30 calls/minute**. Should you require a higher rate limit, you may subscribe to any CoinGecko API paid plan to access higher rate limit for GeckoTerminal endpoints (known as /onchain endpoints) or learn more at [CoinGecko](https://www.coingecko.com/en/api/pricing).   To share with us your feedback about the public API, let us know [here](https://forms.gle/jSMu4jLQBXeiVD1U9)!
 *
 * The version of the OpenAPI document: v2-beta
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  ErrorsObject,
  NetworksNetworkPoolsPoolAddressInfoGet200Response,
  NetworksNetworkTokensAddressGet200Response,
  NetworksNetworkTokensAddressInfoGet200Response,
  NetworksNetworkTokensMultiAddressesGet200Response,
  NetworksTrendingPoolsGet200Response,
} from '../models/index'
import {
  ErrorsObjectFromJSON,
  ErrorsObjectToJSON,
  NetworksNetworkPoolsPoolAddressInfoGet200ResponseFromJSON,
  NetworksNetworkPoolsPoolAddressInfoGet200ResponseToJSON,
  NetworksNetworkTokensAddressGet200ResponseFromJSON,
  NetworksNetworkTokensAddressGet200ResponseToJSON,
  NetworksNetworkTokensAddressInfoGet200ResponseFromJSON,
  NetworksNetworkTokensAddressInfoGet200ResponseToJSON,
  NetworksNetworkTokensMultiAddressesGet200ResponseFromJSON,
  NetworksNetworkTokensMultiAddressesGet200ResponseToJSON,
  NetworksTrendingPoolsGet200ResponseFromJSON,
  NetworksTrendingPoolsGet200ResponseToJSON,
} from '../models/index'

export interface NetworksNetworkPoolsPoolAddressInfoGetRequest {
  network: string
  poolAddress: string
}

export interface NetworksNetworkTokensAddressGetRequest {
  network: string
  address: string
  include?: string
}

export interface NetworksNetworkTokensAddressInfoGetRequest {
  network: string
  address: string
}

export interface NetworksNetworkTokensMultiAddressesGetRequest {
  network: string
  addresses: string
  include?: string
}

export interface NetworksNetworkTokensTokenAddressPoolsGetRequest {
  network: string
  tokenAddress: string
  include?: string
  page?: number
  sort?: string
}

export interface TokensInfoRecentlyUpdatedGetRequest {
  include?: string
  network?: string
}

/**
 *
 */
export class TokensApi extends runtime.BaseAPI {
  /**
   * Get pool tokens info on a network
   */
  async networksNetworkPoolsPoolAddressInfoGetRaw(
    requestParameters: NetworksNetworkPoolsPoolAddressInfoGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<NetworksNetworkPoolsPoolAddressInfoGet200Response>
  > {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling networksNetworkPoolsPoolAddressInfoGet().'
      )
    }

    if (requestParameters['poolAddress'] == null) {
      throw new runtime.RequiredError(
        'poolAddress',
        'Required parameter "poolAddress" was null or undefined when calling networksNetworkPoolsPoolAddressInfoGet().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/{network}/pools/{pool_address}/info`
          .replace(
            `{${'network'}}`,
            encodeURIComponent(String(requestParameters['network']))
          )
          .replace(
            `{${'pool_address'}}`,
            encodeURIComponent(String(requestParameters['poolAddress']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksNetworkPoolsPoolAddressInfoGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get pool tokens info on a network
   */
  async networksNetworkPoolsPoolAddressInfoGet(
    requestParameters: NetworksNetworkPoolsPoolAddressInfoGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksNetworkPoolsPoolAddressInfoGet200Response> {
    const response = await this.networksNetworkPoolsPoolAddressInfoGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get specific token on a network
   */
  async networksNetworkTokensAddressGetRaw(
    requestParameters: NetworksNetworkTokensAddressGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<NetworksNetworkTokensAddressGet200Response>> {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling networksNetworkTokensAddressGet().'
      )
    }

    if (requestParameters['address'] == null) {
      throw new runtime.RequiredError(
        'address',
        'Required parameter "address" was null or undefined when calling networksNetworkTokensAddressGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/{network}/tokens/{address}`
          .replace(
            `{${'network'}}`,
            encodeURIComponent(String(requestParameters['network']))
          )
          .replace(
            `{${'address'}}`,
            encodeURIComponent(String(requestParameters['address']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksNetworkTokensAddressGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get specific token on a network
   */
  async networksNetworkTokensAddressGet(
    requestParameters: NetworksNetworkTokensAddressGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksNetworkTokensAddressGet200Response> {
    const response = await this.networksNetworkTokensAddressGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get specific token info on a network
   */
  async networksNetworkTokensAddressInfoGetRaw(
    requestParameters: NetworksNetworkTokensAddressInfoGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<NetworksNetworkTokensAddressInfoGet200Response>
  > {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling networksNetworkTokensAddressInfoGet().'
      )
    }

    if (requestParameters['address'] == null) {
      throw new runtime.RequiredError(
        'address',
        'Required parameter "address" was null or undefined when calling networksNetworkTokensAddressInfoGet().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/{network}/tokens/{address}/info`
          .replace(
            `{${'network'}}`,
            encodeURIComponent(String(requestParameters['network']))
          )
          .replace(
            `{${'address'}}`,
            encodeURIComponent(String(requestParameters['address']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksNetworkTokensAddressInfoGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get specific token info on a network
   */
  async networksNetworkTokensAddressInfoGet(
    requestParameters: NetworksNetworkTokensAddressInfoGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksNetworkTokensAddressInfoGet200Response> {
    const response = await this.networksNetworkTokensAddressInfoGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get multiple tokens on a network
   */
  async networksNetworkTokensMultiAddressesGetRaw(
    requestParameters: NetworksNetworkTokensMultiAddressesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<NetworksNetworkTokensMultiAddressesGet200Response>
  > {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling networksNetworkTokensMultiAddressesGet().'
      )
    }

    if (requestParameters['addresses'] == null) {
      throw new runtime.RequiredError(
        'addresses',
        'Required parameter "addresses" was null or undefined when calling networksNetworkTokensMultiAddressesGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/{network}/tokens/multi/{addresses}`
          .replace(
            `{${'network'}}`,
            encodeURIComponent(String(requestParameters['network']))
          )
          .replace(
            `{${'addresses'}}`,
            encodeURIComponent(String(requestParameters['addresses']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksNetworkTokensMultiAddressesGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get multiple tokens on a network
   */
  async networksNetworkTokensMultiAddressesGet(
    requestParameters: NetworksNetworkTokensMultiAddressesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksNetworkTokensMultiAddressesGet200Response> {
    const response = await this.networksNetworkTokensMultiAddressesGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * contains special field `token_price_usd` representing price of requested token
   * Get top pools for a token
   */
  async networksNetworkTokensTokenAddressPoolsGetRaw(
    requestParameters: NetworksNetworkTokensTokenAddressPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<NetworksTrendingPoolsGet200Response>> {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling networksNetworkTokensTokenAddressPoolsGet().'
      )
    }

    if (requestParameters['tokenAddress'] == null) {
      throw new runtime.RequiredError(
        'tokenAddress',
        'Required parameter "tokenAddress" was null or undefined when calling networksNetworkTokensTokenAddressPoolsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    if (requestParameters['sort'] != null) {
      queryParameters['sort'] = requestParameters['sort']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/networks/{network}/tokens/{token_address}/pools`
          .replace(
            `{${'network'}}`,
            encodeURIComponent(String(requestParameters['network']))
          )
          .replace(
            `{${'token_address'}}`,
            encodeURIComponent(String(requestParameters['tokenAddress']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksTrendingPoolsGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * contains special field `token_price_usd` representing price of requested token
   * Get top pools for a token
   */
  async networksNetworkTokensTokenAddressPoolsGet(
    requestParameters: NetworksNetworkTokensTokenAddressPoolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksTrendingPoolsGet200Response> {
    const response = await this.networksNetworkTokensTokenAddressPoolsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get most recently updated 100 tokens info across all networks
   */
  async tokensInfoRecentlyUpdatedGetRaw(
    requestParameters: TokensInfoRecentlyUpdatedGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<NetworksNetworkPoolsPoolAddressInfoGet200Response>
  > {
    const queryParameters: any = {}

    if (requestParameters['include'] != null) {
      queryParameters['include'] = requestParameters['include']
    }

    if (requestParameters['network'] != null) {
      queryParameters['network'] = requestParameters['network']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/tokens/info_recently_updated`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworksNetworkPoolsPoolAddressInfoGet200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get most recently updated 100 tokens info across all networks
   */
  async tokensInfoRecentlyUpdatedGet(
    requestParameters: TokensInfoRecentlyUpdatedGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworksNetworkPoolsPoolAddressInfoGet200Response> {
    const response = await this.tokensInfoRecentlyUpdatedGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
